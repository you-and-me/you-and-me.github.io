{"meta":{"title":"Hexo个人博客","subtitle":null,"description":null,"author":"Jing's Blog","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Hexo主题Yilia","slug":"Hexo主题yilia","date":"2017-07-03T10:02:19.453Z","updated":"2018-02-28T08:47:26.984Z","comments":true,"path":"2017/07/03/Hexo主题yilia/","link":"","permalink":"http://yoursite.com/2017/07/03/Hexo主题yilia/","excerpt":"","text":"Hexo主题hexo-theme-yilia 是为 hexo 2.4+制作的主题。响应式设计，风格简约。 关于主题： 该主题拿掉了标签云，搜索框 接地气一点。所以用上了jiathis分享，友言评论，以及baidu的cdn 让大家把注意力放到内容上。这是本主题设计初衷 主题不支持IE6，7，8。以后也不会 一、使用1. 安装$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 2. 配置修改hexo根目录下的 _config.yml ： theme: yilia 3. 更新cd themes/yilia git pull 二、外观三、配置主题配置文件在主目录下的_config.yml： # Header menu: 主页: / 所有文章: /archives # 旧事: /tags/旧事 # SubNav subnav: github: &quot;https://github.com/litten&quot; weibo: &quot;http://weibo.com/litten225&quot; rss: &quot;http://feed.feedsky.com/litten&quot; # facebook: &quot;/&quot; # google: &quot;/&quot; # twitter: &quot;/&quot; # linkedin: &quot;/&quot; rss: /atom.xml # Content excerpt_link: more fancybox: true # Miscellaneous favicon: /favicon.png avatar: &quot;https://avatars2.githubusercontent.com/u/2024949?v=2&amp;s=150&quot; share: true duoshuo: true","categories":[],"tags":[{"name":"hexo,主题","slug":"hexo-主题","permalink":"http://yoursite.com/tags/hexo-主题/"}]},{"title":"慎用正则表达式全局匹配（/g）","slug":"慎用正则表达式全局匹配","date":"2017-07-03T08:03:31.860Z","updated":"2017-07-03T08:42:17.088Z","comments":true,"path":"2017/07/03/慎用正则表达式全局匹配/","link":"","permalink":"http://yoursite.com/2017/07/03/慎用正则表达式全局匹配/","excerpt":"","text":"慎用正则表达式全局匹配（/g）每个正则表达式都有一个lastindex属性，用于记录上一次匹配结束的位置，如果未带参数g，lastindex始终为0。 var res = /\\d/i; var gre = /\\d/gi; var str = &apos;ad2df&apos;; console.log(res.test(str)); //true，lastindex=0 console.log(res.test(str)); //true，lastindex=0 console.log(gre.test(str)); //true，lastindex=3 console.log(gre.test(str)); //false，lastindex=0 从上面的结果可以看出，带参数g，调用test不会一直true，因为第二次调用test的时候，会从第3个字符之后继续搜索。 解决方法：将lastindex重置为0，或者直接去掉正则的参数g。 exec()方法同样是如此。exec()方法返回的是一个数组，数组的第一个元素是匹配到的字符串，之后的串元素则分别对应匹配到的字。如果使用exec()方法的正则表达式没有全局标志，则只会匹配第一个，如果正则表达式有全局标志，则可以循环使用exec()来得到所有的匹配，直到exec()返回null为止，也就是找不到匹配了。这里能够循环使用同一个正则表达式的exec()方法，靠的就是lastIndex，因为带全局标志的正则表达式每次匹配后都会更新lastIndex的值作为下次查找匹配的起点。","categories":[],"tags":[]},{"title":"工具+素材+插件","slug":"工具+素材+插件","date":"2017-05-23T02:20:00.000Z","updated":"2017-05-23T02:32:17.004Z","comments":true,"path":"2017/05/23/工具+素材+插件/","link":"","permalink":"http://yoursite.com/2017/05/23/工具+素材+插件/","excerpt":"","text":"工具+素材+插件​ CodePen，一个社会开发环境 http://codepen.io/ 一个漂亮的素材库 https://preloaders.net/ 适合移动端的HTML5 Datepicker http://www.powerxing.com/html5-datepicker/","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/tags/前端开发/"}]},{"title":"移动页面点击穿透","slug":"click-through","date":"2017-04-24T08:28:41.000Z","updated":"2017-04-24T08:36:56.968Z","comments":true,"path":"2017/04/24/click-through/","link":"","permalink":"http://yoursite.com/2017/04/24/click-through/","excerpt":"","text":"导语： 在做移动端项目时，多次遇到了这种情况：点击蒙层，蒙层下的对象也触发了click事件。在此提出产生的原因和解决方案，希望对大家有帮助！ 一、产生点透的原因移动事件提供了touchstart、touchmove和touchend，反应速度都比click快，因为click事件有300ms的延迟，用来等待一段时间判断是不是双击。所以，touch事件响应结束后，还可能响应click事件，产生点透事件。 二、解决方案点击穿透发生的情况我就不列举了，相信大家也遇到过一些，慢慢总结吧。 只用touch，不用click，这里要注意a标签中href属性是响应click事件，需要修改为js跳转； 只用click，不过不建议这样做，因为太慢。 拿东西挡着，例如新建一个空白层将不希望点击到的区域盖住； 使用fastclick，引入fastclick库，再把所有touch换成click，目前用的挺好。不过有资料表明这个插件也有bug，在Android4.2的浏览器中会响应两次点击； 使用延迟约350ms，结合pointer-events:none，不过这样也会存在问题，当点击上层元素后，下层元素在350ms内点击都无效。 注意：pointer-events:none最好只在一个元素上设置，如果其子元素值为auto，则该元素任然能响应鼠标事件 总结其实，每种方法各有优缺点，就拿方案1说吧，如果页面中的a标签很多，需要链接到多个页面，这样修改起来不免麻烦，所以，选择哪种方案，还需要根据实际情况考虑。 说了这么多，怎么没说PC端呢，嘿嘿，因为PC不支持touch事件呀！","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/tags/前端开发/"}]},{"title":"优化页面加载速度","slug":"pageQuickDownload","date":"2017-03-22T02:10:41.000Z","updated":"2017-04-24T08:30:14.717Z","comments":true,"path":"2017/03/22/pageQuickDownload/","link":"","permalink":"http://yoursite.com/2017/03/22/pageQuickDownload/","excerpt":"","text":"页面载入时间，小于2s的是优良的，2s-4s是可接受的，但大于5s会严重影响用户体验，因为当页面加载时间过长时，用户很可能离开你的页面。所以，页面加载速度是页面制作时的一项重要考虑因素。 下面总结一些优化方法1、优化图像和文件格式确保图像尽可能小，并且，选用格式时，一般选用JPEG格式，有Alpha因子或透明的或要求分辨率高的选用PNG，动画选用GIF。 2、顶部css样式，底部js文件顶部css样式可以使网页渐进式呈现；js文件加载时会阻止其他代码加载，当放在底部时可以避免代码的等待，提高加载速度。 3、优化HTML、css、js文件删除不必要的注释和空格，从而减小文件大小。 4、文件分离不使用内联css，因为内联css会增加网页大小，增加大量维护工作；文件可以分为css、js和图像，这样可以提高服务器的稳定性。 5、gzip压缩压缩文件大小，类似第3点，不过压缩让文件变得更小。 6、去掉不必要插件每个插件都需要服务器处理，从而增加页面加载时间。 7、减少DNS查询DNS会花费很长时间来返回一个主机名的IP地址，而浏览器在查询结束前不会进行任何操作，减少不同域名的数量可以减少DNS查询，加快页面加载速度。 8、尽量减少http请求减少网站上的对象数量；最小化网站上的重定向数量；使用CSS Sprites技术（只要你需要的那部分图片内容）；结合JavaScripts和CSS。 9、异步脚本在异步模式中，脚本是在后台下载的（因为下载脚本会拖慢网速，所以我们会将第三方脚本作为异步脚本），页面不需要脚本加载完后就呈现出来。 10、使用内容分发网络（CDN）CDN是位于不同地理位置的服务器组成的网络，每个服务器都拥有所有网站的文件副本。当访问者请求文件和网页时，就可以从就近的网站服务器或负载最小的服务器发送过来。 11、利用浏览器缓存允许浏览器缓存你的网页副本，优化缓存系统。 12、启用Keep AliveKeep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，如果“Keep Alive”选项被禁止，那么下载网站的进程通常就会增加，从而拖累了网站速度；启用KeepAlive，它可以减少CPU的使用。 阅读原文","categories":[],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"http://yoursite.com/tags/前端开发/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-03-20T01:54:05.300Z","updated":"2017-03-20T01:54:05.336Z","comments":true,"path":"2017/03/20/hello-world/","link":"","permalink":"http://yoursite.com/2017/03/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}